  
name:  Store Build 1

# Trigger on every new tag creation
on:
  push:
    branches: 
     - ReleaseBuild
     - develop
     - master
  tags:
     - "**"

jobs:

  build:

    strategy:
      matrix:
        channel: [Store]

    runs-on: windows-latest

    env:
      SigningCertificate: Sherpany.App_TemporaryKey.pfx
      Solution_Path: EG.Sherpany.Boardroom\Sherpany.sln
      UWP_Project_Path: EG.Sherpany.Boardroom\EG.Sherpany.Boardroom.W10\Sherpany.App.csproj
      UWP_Project_Directory: EG.Sherpany.Boardroom\EG.Sherpany.Boardroom.W10
      DeployPath: DeployOutput
      
    steps:

    - name: Get tag
      id: tag
      uses: dawidd6/action-get-tag@v1

    - name: Use tag
      run: echo ${{steps.tag.outputs.tag}}
           
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0

    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ".\$env:UWP_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{steps.tag.outputs.tag}}"
        $manifest.save(".\$env:UWP_Project_Directory\Package.appxmanifest")
        
    - name: Build the sideload solution
      run: msbuild $env:Solution_Path /p:Platform=ARM64 /p:AppxBundle=$env:AppxBundle /p:AppxBundlePlatforms="ARM64|x64" /p:AppxPackageDir=C:\DeployOutput /p:PackageCertificateKeyFile=$env:SigningCertificate /restore
      env:
        AppxBundle: Always
        BuildMode: StoreUpload
        Configuration: Release  
    
    - name: Create archive
      run: Compress-Archive -Path C:\DeployOutput\* -DestinationPath C:\DeployOutput\StorePackages.zip

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: C:\DeployOutput\StorePackages.zip  # Use the full path here because environment variables are not in scope
        asset_name: StorePackages.zip
        asset_content_type: application/zip

